
; Device names that you need to set 


; VARIABLES ===================================================

(defpoll audioMuted :interval "1s"
  :initial `scripts/checkMuted`
  `scripts/checkMuted`)

(defpoll volume :interval "1s"
  `scripts/volume`)

(defpoll audioDevices :interval "5s"
  `scripts/getAudioDevices all`)

(defpoll networkTracking :interval "1s"
  :initial `scripts/network tracking &`
  `scripts/network tracking &`)

(defpoll networkInterfaces :interval "10s"
  `scripts/network interfaces`)

(defpoll battery :interval "5s"
  :initial `scripts/battery amount`
  `scripts/battery amount`)

(defpoll charging :interval "5s"
  :initial `scripts/battery charging`
  `scripts/battery charging`)

(defpoll processes :interval "1s"
  :initial `ps Tk "-pcpu" --deselect -o "pid:7,comm:18,pcpu:5,pmem:6" | head | tr "%" " " | sed "s/./%/34" | awk '{ print $0 " %" }'`
  `ps Tk "-pcpu" --deselect -o "pid:7,comm:18,pcpu:5,pmem:6" | head | tr "%" " " | sed "s/./%/34" | awk '{ print $0 " %" }'`)

(defpoll batteryTime :interval "5s"
  :initial `scripts/battery time`
  `scripts/battery time`)

(defpoll batteryLong :interval "5s"
  :initial `acpi`
  `acpi`)

(defpoll workspaces :interval "5s"
  `scripts/getOpenWindowsJSON`)

(defpoll time :interval "1s"
  :initial "00:00 am"  ; optional, defaults to poll at startup
  `date +"%l:%M:%S %p"`)

(defpoll date :interval "1m"
  :initial `date +"%A %D"`  ; optional, defaults to poll at startup
  `date +"%A %D"`)

(defpoll brightnessKbd :interval "5s"
  :initial `brightnessctl -d $KEYBOARD_BACKLIGHT g`
  `brightnessctl -d $KEYBOARD_BACKLIGHT g`)
(defpoll brightnessMon :interval "5s"
  :initial `brightnessctl -d $MONITOR_BACKLIGHT g`
  `brightnessctl -d $MONITOR_BACKLIGHT g`)

(defpoll brightnessKbdMax :interval "5h"
    :initial `brightnessctl -d $KEYBOARD_BACKLIGHT m`
  `brightnessctl -d $KEYBOARD_BACKLIGHT m`)
(defpoll brightnessMonMax :interval "5h"
    :initial `brightnessctl -d $MONITOR_BACKLIGHT m`
  `brightnessctl -d $MONITOR_BACKLIGHT m`)

(deflisten music :initial "Nothing Playing"
  "playerctl --follow -p spotify metadata --format '{{ artist }} - {{ title }}' || true")

(deflisten musicArt
  :initial ""
  `playerctl --follow -p spotify metadata --format '{{mpris:artUrl}}' | scripts/cacheSpotifyIcons`)

(deflisten musicLength :interval "3s"
  :initial 100
  `playerctl --follow -p spotify metadata --format '{{mpris:length}}' | scripts/getSongLength`)
(deflisten musicLengthText :interval "3s"
  :initial 100
  `playerctl --follow -p spotify metadata --format '{{duration(mpris:length)}}'`)
(deflisten musicPosition 
  :initial 0
  `playerctl --follow -p spotify position`)
(deflisten musicTimeDisplay 
  :initial "0:00"
  `playerctl --follow -p spotify position --format '{{duration(position)}}'`)
(deflisten musicPlaying :interval "1s"
  :initial "not"
  `playerctl --follow -p spotify status`)



; WIDGETS ===========================================



; bar ----------------
(defwidget bar []
  (centerbox :class "bar" :orientation "h" :space-evenly false
             (start)
             (musicSection)
             (end))
  )
(defwidget start []
  (box :class "start" :halign "start" :space-evenly false 
       (clock)
       (for workspace in workspaces
            (button :class "workspace" :onclick "hyprctl dispatch workspace ${workspace[0].id} &"
                    (box :orientation "v" :space-evenly false
                         (box :class "markers" :halign "center" :valign "start" :orientation "h" :space-evenly false :spacing 2
                              (for app in workspace
                                   (box :class "marker" :style "background-image: url('${app.icon}');"
                                        )
                                   )
                              )
                         (box :class "text" :space-evenly false :halign "center"
                              "${replace(workspace[0].name, "special:", "")}"
                              )
                         )
                    )
            )
       ))

(defwidget clock []
  (button :halign "start" 
          :class "clock" 
          :halign "start" 
          :onclick "scripts/windowManager open datePopOut &"
          time)
  )

(defwidget musicSection []
  (button :class "music" :onclick "scripts/windowManager open musicControls &";
          (box :orientatino "h" :interactable true :space-evenly false :spacing 10
               (box :class "note"
                    "♪")
               (image :image-width: 40 :image-height 40 :path musicArt)
               "${music}"
               (box :class "note" 
                    "♪")
               ))
  )



(defwidget end []
  (box :class "end" :orientation "h" :halign "end" :space-evenly false :spacing 0
       (button :class "brightness" :onclick "scripts/windowManager open brightnessControls"
               (box :class "icon"
                    " "
                    )
               )
       (button :class "network" :onclick "scripts/windowManager open networkStats"
               (box :orientation "v" :width 70 
                    (box :orientation "h" :space-evenly false :spacing 5 :halign "center"
                               "${round(networkTracking.history[0].all.upload/ 1000000, 3)} Mbps"
                               "󰁞"
                     )
                    (box :orientation "h" :space-evenly false :spacing 5 :halign "center"
                               "${round(networkTracking.history[0].all.download / 1000000, 3)} Mbps"
                              "󰁆"
                     )
                 )
               )
       (button :class "performance"
               :onclick "scripts/windowManager open computerStats"
               (box :space-evenly false
                    (box :class "icon" 
                         "  ")
                    (box :class "barContainer" :spacing 0 :space-evenly false :orientation "v" :valign "center"
                         (scale :class "scale"
                                :tooltip "Memory"
                                :min 0
                                :max 101
                                :value "${EWW_RAM.used_mem_perc}"
                                :active false
                                :onchange ""
                                )
                         (scale :class "scale"
                                :tooltip "Avarage CPU Usage"
                                :min 0
                                :max 101
                                :value "${EWW_CPU.avg}"
                                :active false
                                :onchange ""
                                )
                         )
                    )
               )
       (button :class "volume"
               :onclick "scripts/windowManager open audioControls &"
               (box :spacing 5
                    (box :class "text" 
                         "${volume}%")
                    (box :class "icon" 
                         "${audioMuted ? "󰝟" : (volume < 60 ? (volume > 0 ? "󰖀" : "󰕿") : "󰕾 ")}")
                    )
               )
       (button :class "battery"
              :onclick "scripts/windowManager open batteryInfo &"
               (box :space-evenly false :spacing 10
                 (box :class "text"
                      "${batteryTime}"
                 )
                 (box :class "icon"
                   "${charging == "true" ? (battery > 95 ? "󱟢" : "󰂄") : ( battery > 95 ? "󰁹" :( battery > 90 ? "󰂂" : ( battery > 80 ? "󰂁" :( battery > 70 ? "󰂀" :( battery > 60 ? "󰁿" :( battery > 50 ? "󰁾" :( battery > 40 ? "󰁽" :( battery > 30 ? "󰁼" :( battery > 20 ? "󰁻" : ( battery > 10 ? "󰁺" : "󱃍"))))))))))}"
                      )
               )
       )

       )
  )

; popOuts --------------------------------------

(defwidget dateBox []
  (box :class "external pad topLeft" :orientation "v"
       date
       ))

(defvar count "[20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]"
  )
(defwidget myGraphNetwork [data forEachLoopVar interface barHeight]
  (box :class "graphContainer" :space-evenly false :spacing 2
       (box :class "info" :orientation "v"  :valign "center"
            (box :halign "end" :class "key uploadKey"
                 "󰁞")
            (box :halign "end" :class "key downloadKey"
                 "󰁆")
            )
       (box :orientation "v" :space-evenly false
            (box :class "graph" :orientation "h" :height barHeight :width 0 :space-evenly false 
                 (for num in forEachLoopVar
                      (box :orientation "h"
                           (box :class "downloadContainer" :orientation "v" :space-evenly false :valign "end"
                                (box :class "graphBar download" :height {round(barHeight * (((data.history[num]["${interface}"].download + data.history[num == 20 ? num : num + 1]["${interface}"].download)/2) / (data.max["${interface}"] + 1)), 0)}
                                     :width 1 
                                     )
                                )
                           (box :class "uploadContainer" :orientation "v" :space-evenly false :valign "end"
                                (box :class "graphBar upload" :height {round(barHeight * (((data.history[num]["${interface}"].upload + data.history[num == 20 ? num : num + 1]["${interface}"].upload)/2) / (data.max["${interface}"] + 1)), 0)}
                                     :width 1 
                                     )
                                )
                           )
                      )
                 )
            (box :class "interfaceName"
                 "${interface == "all" ? "Total" : interface}"
                 )
            )
       (box :halign "start" :valign "start" :class "max" 
            "${round((data[0]["${interface}"] + 1)/ 1000, 2)} Kb")
       )
  )
(defwidget networkStats []
  (box :class "computerStats external topRight" :orientation "v" :space-evenly false :style "padding: 20px;" :spacing 20
       (box :space-evenly false :spacing 10 :halign "end"
            (myGraphNetwork :data "${networkTracking}"
                            :forEachLoopVar "${count}"
                            :interface "all"
                            :barHeight 100)
            )
       (for interface in networkInterfaces
            (box :space-evenly false :spacing 10 :halign "end"
                 (myGraphNetwork :data "${networkTracking}"
                                 :forEachLoopVar "${count}"
                                 :interface "${interface}"
                                 :barHeight 100)
                 )
            )
       ))
(defwidget brightnessControls []
  (box :class "brightnessControls external topRight pad" :orientation "v" :space-evenly false :spacing 30
       (box :orientation "v" :space-evenly false :spacing 10
            "Monitor"
            (box :orientation "h" :space-evenly false :spacing 10
                 "${round(brightnessMon / brightnessMonMax * 100, 1)} %"
                 (scale :min 0
                         :max brightnessMonMax
                         :value brightnessMon
                         :active true
                         :onchange "brightnessctl -d $MONITOR_BACKLIGHT s {}; eww update brightnessMon={}"
                         )
             )
        )
       (box :orientation "v" :space-evenly false :spacing 10
            "Keyboard"
            (box :orientation "h" :space-evenly false :spacing 10
                 "${round(brightnessKbd / brightnessKbdMax * 100, 1)} %"
                 (scale :min 0
                         :max brightnessKbdMax
                         :value brightnessKbd
                         :active true
                         :onchange "brightnessctl -d $KEYBOARD_BACKLIGHT s {}; eww update brightnessKbd={}"
                         )
             )
        )

  ))


(defwidget computerStats []
  (box :class "computerStats external topRight" :orientation "v" :space-evenly false :style "padding: 20px;" :spacing 20
       (box :class "cpu" :orientation "v" :space-evenly false :spacing 5
            "CPU"
            (centerbox :class "average" :orientation "h"
                       "Avg."
                       (scale :min 0
                              :max 101
                              :active false
                              :value "${EWW_CPU.avg}"
                              :onchange ""
                              )
                       (box :halign "end"
                            "${round(EWW_CPU.avg, 1)} %"
                            )
                       )
            (for core in "${EWW_CPU.cores}"
                 (centerbox :orientation "h"
                            "${core.core}"
                            (scale :min 0
                                   :max 101
                                   :active false
                                   :value "${core.usage}"
                                   :onchange ""
                                   )
                            (box :halign "end"
                                 "${core.freq} Mhz"
                                 )
                            )
                 )
            )
       (box :class "memory" :orientation "v" :spacing 5
            "Memory"
            (centerbox :orientation "h" 
                       "${round(EWW_RAM.used_mem / 1000000000, 2)} Gb"
                       (scale :min 0
                              :max 101
                              :active false
                              :value "${EWW_RAM.used_mem_perc}"
                              :onchange ""
                              )
                       "${round(EWW_RAM.total_mem / 1000000000, 2)} Gb"
                       )
            )
       (box :class "processes pad"
            "${processes}"
            )

       ))


(defwidget audioControls []
  (box :class "external pad audioControls topRight" :orientation "v"
       (box :class "mainAudio" :orientation "h" :space-evenly false :spacing 10
            (button :style "font-size: 18pt; padding-right:20px"
                    :onclick "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle &"
                    "${audioMuted == "true" ? "󰝟" : volume < 60 ? (volume > 0 ? "󰖀" : "󰕿") : "󰕾"}")
            (scale :min 0
                   :max 101
                   :active true
                   :value volume
                   :onchange "scripts/setvolume {}; eww update volume=`scripts/volume`") ; sets volume and updates volume variable
            (box :class "text"
                 "${volume}%")
            )
       (box :class "audioList border" :orientation "v"
            (for device in audioDevices
                 (button :onclick "wpctl set-default ${device[1]}; eww update audioDevices=\"`scripts/getAudioDevices all`\"" :class "${device[0] ? "active" : ""}"
                         (box :space-evenly false :spacing 20
                              (box :class "icon"
                                   "󰋋")
                              (box :class "text"
                                   "${device[2]}"
                                   )
                              )
                         )
                 )
            )
 ))

(defwidget batteryInfo []
  (box :class "external pad batteryInfo topRight" :orientation "h" :space-evenly false :spacing 10
       (scale :min 0 ; sets volume and updates volume variable
              :max 101
              :active false
              :value battery
              :onchange ""
              )
       "${battery}%"
       )
  )


(defwidget musicControls []
  (box :class "external musicControls" :orientation "v" :space-evenly false
       (box :class "image" :orientation "h" :style "background-image: url('${musicArt}');")
       (centerbox :class "topBox" :orientation "h" :space-evenly false
                  (box :class "time" :halign "end" 
                       musicTimeDisplay)
                  (box :class "slider"
                       (scale :class "musicSlider" 
                              :halign "center"
                              :min 0
                              :max musicLength
                              :active true
                              :value musicPosition
                              :onchange "playerctl -p spotify position {}")
                       )
                  (box :class "time" :halign "start" 
                       musicLengthText)
                  )
       (box :orientation "h"
            (button :onclick "playerctl -p spotify previous &"
                    "󰒮")
            (button :class "middle"
                    :onclick "playerctl -p spotify play-pause &"
                    {musicPlaying == "Playing" ? "󰏤" : ""})
            (button :onclick "playerctl -p spotify next &"
                    "󰒭")
            )
       ))


; WINDOWS =========================================================
(defwindow bartop
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "100%"
                      :height "30px"
                      :anchor "top center")
  :stacking "fg"
  :exclusive true
  :wm-ignore false
  (bar)
  )
(defwindow datePopOut
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "20%"
                      :height "10px"
                      :anchor "top left")
  :stacking "overlay"
  :exclusive false
  :wm-ignore false
  (dateBox)
  )
(defwindow musicControls
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "400px"
                      :height "150px"
                      :anchor "top center")
  :stacking "overlay"
  :exclusive false
  :wm-ignore false
  (musicControls)
  )

(defwindow audioControls
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "300px"
                      :height "10px"
                      :anchor "top right")
  :stacking "overlay"
  :exclusive false
  :wm-ignore false
  (audioControls)
  )
(defwindow batteryInfo
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "300px"
                      :height "10px"
                      :anchor "top right")
  :stacking "overlay"
  :exclusive false
  :wm-ignore false
  (batteryInfo)
  )

(defwindow computerStats
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "450px"
                      :height "10px"
                      :anchor "top right")
  :stacking "overlay"
  :exclusive false
  :wm-ignore false
  (computerStats)
  )

(defwindow networkStats
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "450px"
                      :height "10px"
                      :anchor "top right")
  :stacking "overlay"
  :exclusive false
  :wm-ignore false
  (networkStats)
  )

(defwindow brightnessControls
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "300px"
                      :height "10px"
                      :anchor "top right")
  :stacking "overlay"
  :exclusive false
  :wm-ignore false
  (brightnessControls)
  )


; closer
(defwidget closerCover []
  (eventbox :onclick "scripts/windowManager close &"))
(defwindow windowCloser
  :monitor 0
  :geometry (geometry :width "100%" :height "100%")
  :stacking "fg"
  :focusable false
  (closerCover)
  )
