; Variables to disable features that need to be heavily altered to your machine.
; if the variable is tabbed it means its in the sub menu
(defvar enableTime true)
(defvar enableWorkspaces true)
(defvar enableMusic true)

; these two are in the same sub menu. make both false if you want it gone completely 
  (defvar enableSensors true)
  (defvar enableFans false)


(defvar enableWifi false)
(defvar enableBrightness false)
(defvar enableNetwork true)
(defvar enablePerformance true)
(defvar enableVolume true)


(defvar enableBattery false)
  (defvar enablePowerProfileSelection true) ; in the sub menu of battery


; cava options (musicBars) =============================================================

(defvar enableMusicBar true)

; theres a chance the bars are being pushed offscreen.
; configure the cavaConfig file for the amount / height / equalizer / gravity / wave filters. 

; --minimum-output-height [num]
; this variable is used to for the cavawrapper applications that passes the data to eww.
; the lower this is the less performance eww will use when not playing audio.
; However, if its to low then eww stutters due to the rapid change in the output length (most noticible is when pausing an playing audio).
; this depends on how high you have set your bars too. but 64 (7 lines of text) is a pretty good balance.

; --bar-added-height [num]
; this variable adds a set amount of height to every bar. 
; set this to 0 if you dont want to see any bars when not playing audio.
; increase it if you want a bigger bigger permenant bar. if you set this really big it will lower performance.

(deflisten musicBarsData 
  :run-while enableMusicBar
  "cava -p ./cavaConfig | scripts/cavawrapper --bar-added-height 0 --minimum-output-height 64")

; VARIABLES ===================================================


(defvar minSliderFanSpeed 0)
(defvar maxSliderFanSpeed 6000)

(defpoll fanSpeedRight :interval "1s"
  :run-while enableFans
  `sensors | awk ' /Right/ && /RPM/ { print $4 }'`)
(defpoll fanSpeedLeft :interval "1s"
  :run-while enableFans
  `sensors | awk ' /Left/ && /RPM/ { print $4 }'`)

(defpoll minFanSpeed :interval "1s"
  :run-while enableFans
   `head -n 1 /sys/devices/platform/applesmc.768/fan1_min`)
;need to update the stored value when this variable refreshes. otherwise there will be a desyinc in whats stored and what you see. 
(defpoll barMinFanSpeed :interval "10h"
  :run-while enableFans
  :initial "0"
   `head -n 1 /sys/devices/platform/applesmc.768/fan1_min; scripts/setMinFanSpeed store $(head -n 1 /sys/devices/platform/applesmc.768/fan1_min)`)



(defpoll sensors :interval "2s"
  :run-while enableSensors
  :initial '{"cpu":[],"gpu":[],"general":[]}'
  `scripts/getSensors`)

(defpoll audioMuted :interval "1s"
  :run-while enableVolume
  :initial "false"
  `scripts/checkMuted`)

(defpoll volume :interval "1s"
  :run-while enableVolume
  :initial "50"
  `scripts/volume`)

(defpoll audioDevices :interval "5s"
  :run-while enableVolume
  :initial "[]"
  `scripts/getAudioDevices all`)

(defpoll networkTotal :interval "1s"
  :run-while enableNetwork
  :initial '{"download":0,"upload":0}'
  `scripts/network total`)

(defpoll networkTracking :interval "1s"
  :run-while enableNetwork
  :initial '{"max":{"all":420,"lo":0,"wlan0":420},"history":[{"all":{"download":0,"upload":0},"lo":{"download":0,"upload":0},"wlan0":{"download":0,"upload":0}}]}'
  `scripts/network tracking &`)

(defpoll networkInterfaces :interval "10s"
  :run-while enableNetwork
  :initial "[]"
  `scripts/network interfaces`)

(defpoll wifi :interval "1s"
  :run-while enableWifi
  :initial '{"connected":false,"name":"none","address":"none"}'
  `scripts/wifi get`)

(defpoll battery :interval "5s"
  :run-while enableBattery
  :initial '100'
  `scripts/battery amount`)

(defpoll charging :interval "5s"
  :run-while enableBattery
  `scripts/battery charging`)

(defpoll powerMode :interval "1s"
  :run-while {enableBattery && enablePowerProfileSelection}
  `tlp-stat -s | awk -F= '/Mode/ { print $2 $3}' &`)


(defpoll processes :interval "1s"
  :run-while enablePerformance
  `ps Tk "-pcpu" --deselect -o "pid:7,comm:18,pcpu:5,pmem:6" | head | tr "%" " " | sed "s/./%/34" | awk '{ print $0 " %" }'`)

(defpoll batteryTime :interval "5s"
  :run-while enableBattery
  `scripts/battery time`)

(defpoll workspaces :interval "20s"
  :run-while enableWorkspaces
  :initial "(box)"
  `scripts/getOpenWindowsJSON yuck &`)

(defpoll time :interval "1s"
  :run-while enableTime 
  :initial "00:00 am"  ; optional, defaults to poll at startup
  `date +"%l:%M:%S %p"`)

(defpoll date :interval "1m"
  :run-while enableTime
  `date +"%A %D"`)

(defpoll brightnessKbd :interval "5s"
  :run-while enableBrightness
  :initial "0"
  `brightnessctl -d $KEYBOARD_BACKLIGHT g`)
(defpoll brightnessMon :interval "5s"
  :run-while enableBrightness
  :initial "0"
  `brightnessctl -d $MONITOR_BACKLIGHT g`)

(defpoll brightnessKbdMax :interval "5h"
  :run-while enableBrightness
  :initial "0"
  `brightnessctl -d $KEYBOARD_BACKLIGHT m`)

(defpoll brightnessMonMax :interval "5h"
  :run-while enableBrightness
  :initial "0"
  `brightnessctl -d $MONITOR_BACKLIGHT m`)

(deflisten music :initial "Nothing Playing"
  :run-while enableMusic
  "playerctl --follow -p spotify metadata --format '{{ status }} | {{ artist }} - {{ title }}' || true")


(deflisten musicArt
  :run-while enableMusic
  `playerctl --follow -p spotify metadata --format '{{mpris:artUrl}}' | scripts/cacheSpotifyIcons`)

(deflisten musicLength :interval "3s"
  :run-while enableMusic
  :initial "150"
  `playerctl --follow -p spotify metadata --format '{{mpris:length}}' | scripts/getSongLength`)
(deflisten musicLengthText :interval "3s"
  :run-while enableMusic
  :initial "2:30"
  `playerctl --follow -p spotify metadata --format '{{duration(mpris:length)}}'`)
(deflisten musicPosition 
  :run-while enableMusic
  :initial 0
  `playerctl --follow -p spotify position`)
(deflisten musicTimeDisplay 
  :run-while enableMusic
  :initial "0:00"
  `playerctl --follow -p spotify position --format '{{duration(position)}}'`)
(deflisten musicPlaying :interval "1s"
  :run-while enableMusic
  :initial ""
  `playerctl --follow -p spotify status`)



; WIDGETS ===========================================



; bar ----------------
(defwidget bar []
  (centerbox :class "bar" :orientation "h" 
             (start)
             (musicSection)
             (end))
  )
(defwidget start []
  (box :class "start" :halign "start" :space-evenly false 
       (clock)
       (workspaceSection)
       ))
(defwidget workspaceSection []
  (literal :content workspaces)
  )

(defwidget clock []
  (button :halign "start" :visible enableTime
          :class "clock" 
          :halign "start" 
          :onclick "scripts/windowManager open datePopOut &"
          time)
  )

(defwidget musicSection []
  (button :class "music" :onclick "scripts/windowManager open musicControls &" :visible enableMusic
          (box :orientation "h" :space-evenly false :spacing 10
               (image :image-width 40 :image-height 40 :path musicArt)
               "${musicPlaying != "" ? music : "Spotify Not Open"}"
               ))
  )



(defwidget end []
  (box :class "end" :orientation "h" :halign "end" :space-evenly false :spacing 0
       (button :class "temp" :onclick "scripts/windowManager open tempStats &" :visible {enableSensors || enableFans}
               (box :class "icon"
                    ""
                    )
               )
       (button :class "wifi" :onclick "scripts/windowManager open wifiStats &" :visible enableWifi
               (box :class "icon"
                    {wifi.connected ? "󱛆 " : "󰖪 "}
                    )
               )
       (button :class "brightness" :onclick "scripts/windowManager open brightnessControls &" :visible enableBrightness
               (box :class "icon"
                    " "
                    )
               )
       (button :class "network" :onclick "scripts/windowManager open networkStats &" :visible enableNetwork
               (box :orientation "v" :width 70 
                    (box :orientation "h" :space-evenly false :spacing 5 :halign "center"
                               "${round(networkTotal.upload/ 1000000, 3)} Mbps"
                               "󰁞"
                     )
                    (box :orientation "h" :space-evenly false :spacing 5 :halign "center"
                               "${round(networkTotal.download / 1000000, 3)} Mbps"
                              "󰁆"
                     )
                 )
               )
       (button :class "performance" :visible enablePerformance
               :onclick "scripts/windowManager open computerStats"
               (box :space-evenly false
                    (box :class "icon" 
                         "  ")
                    (box :class "barContainer" :spacing 0 :space-evenly false :orientation "v" :valign "center"
                         (scale :class "scale"
                                :tooltip "Memory"
                                :min 0
                                :max 101
                                :value "${EWW_RAM.used_mem_perc}"
                                :active false
                                :onchange ""
                                )
                         (scale :class "scale"
                                :tooltip "Avarage CPU Usage"
                                :min 0
                                :max 101
                                :value "${EWW_CPU.avg}"
                                :active false
                                :onchange ""
                                )
                         )
                    )
               )
       (button :class "volume" :visible enableVolume
               :onclick "scripts/windowManager open audioControls &"
               (box :spacing 5
                    (box :class "text" 
                         "${volume}%")
                    (box :class "icon" 
                         "${audioMuted ? "󰝟" : (volume < 60 ? (volume > 0 ? "󰖀" : "󰕿") : "󰕾 ")}")
                    )
               )
       (button :class "battery" :visible enableBattery
              :onclick "scripts/windowManager open batteryInfo &"
               (box :space-evenly false :spacing 10
                 (box :class "text"
                      "${batteryTime}"
                 )
                 (box :class "icon"
                   "${charging == "true" ? (battery > 95 ? "󱟢" : "󰂄") : ( battery > 95 ? "󰁹" :( battery > 90 ? "󰂂" : ( battery > 80 ? "󰂁" :( battery > 70 ? "󰂀" :( battery > 60 ? "󰁿" :( battery > 50 ? "󰁾" :( battery > 40 ? "󰁽" :( battery > 30 ? "󰁼" :( battery > 20 ? "󰁻" : ( battery > 10 ? "󰁺" : "󱃍"))))))))))}"
                      )
               )
       )

       )
  )

; popOuts --------------------------------------

(defwidget dateBox []
  (box :class "external pad topLeft" :orientation "v"
       date
       ))
(defwidget tempStats [] 
  (box :class "external  topRight tempStats" :orientation "v" :space-evenly false  

       (box :class "pad" :orientation "h" :space-evenly false :spacing 10 :visible enableFans
            (box :orientation "v" :space-evenly false :valign "center" :spacing 20
                 (box
                   "Left Fan: ${fanSpeedLeft} rpm"
                   "Right Fan: ${fanSpeedRight} rpm"
                   )
                 (box :space-evenly false :spacing 50 :halign "center"
                      (box :halign "start"
                           "Min Speed: ${minFanSpeed}rpm"
                           )
                      )
                 (box :space-evenly false :valign "center" :spacing 5
                      "${barMinFanSpeed}"
                      (scale :min minSliderFanSpeed :max maxSliderFanSpeed :active true :value barMinFanSpeed 
                             :onchange "scripts/setMinFanSpeed store {}; eww update barMinFanSpeed={}" 
                             )
                      "${minSliderFanSpeed}/${maxSliderFanSpeed}"
                      )
                 )
            (button :class "pad border" :onclick "$(pkexec scripts/setMinFanSpeed commit) &"
                    "Set Fan Speed"
                    )
            )
       (box :class "borderBottom" :visible {enableSensors && enableFans})
       (sensorBox :data sensors)
       )
  )

(defwidget sensorBox [data]
  (box :class "pad" :orientation "v" :space-evenly false :visible enableSensors 
       (box :style "background-color: black;" :orientation "v" :space-evenly false
            (box :class "pad borderBottom" :orientation "v" :space-evenly false :spacing 20
                 (box :class "h3 white hack" :halign "center"
                 "CPU Sensors"
                 )
                 (box :orientation "h" :space-evenly true :spacing 10 
                      (sensorDataColumn :data {sensors.cpu} :key1 "name" :title "Name"
                                        :addon ":" :halign "center"
                                        :titleClass "h3 white" :lineClass "sensorCatagoryLine" :textClass "h4 white sensorText")
                      (sensorDataColumn :data {sensors.cpu} :key1 "temps" :key2 "current" :title "temp"
                                        :addon "°C" :halign "center"
                                        :titleClass "h3 white" :lineClass "sensorCatagoryLine" :textClass "h4 white sensorText")
                      (sensorDataColumn :data {sensors.cpu} :key1 "temps" :key2 "hot" :title "hot"
                                        :addon "°C" :halign "center"
                                        :titleClass "h3 white" :lineClass "sensorCatagoryLine" :textClass "h4 white sensorText")
                      (sensorDataColumn :data {sensors.cpu} :key1 "temps" :key2 "critical" :title "critical"
                                        :addon "°C" :halign "center"
                                        :titleClass "h3 white" :lineClass "sensorCatagoryLine" :textClass "h4 white sensorText")
                      )
                 )
            (box :class "pad borderBottom" :orientation "v" :space-evenly false :spacing 20
                 (box :class "h3 white hack" :halign "center"
                 "GPU Sensors"
                 )
                 (box :orientation "h" :space-evenly true :spacing 10 
                      (sensorDataColumn :data {sensors.gpu} :key1 "name" :title "Name"
                                        :addon ":" :halign "center"
                                        :titleClass "h3 white" :lineClass "sensorCatagoryLine" :textClass "h4 white sensorText")
                      (sensorDataColumn :data {sensors.gpu} :key1 "temps" :key2 "current" :title "temp"
                                        :addon "°C" :halign "center"
                                        :titleClass "h3 white" :lineClass "sensorCatagoryLine" :textClass "h4 white sensorText")
                      (sensorDataColumn :data {sensors.gpu} :key1 "temps" :key2 "critical" :title "critical"
                                        :addon "°C" :halign "center"
                                        :titleClass "h3 white" :lineClass "sensorCatagoryLine" :textClass "h4 white sensorText")
                      )
                 )

            (box :class "pad white" :orientation "v" :space-evenly false :spacing 20
                 (box :class "h3 white hack" :halign "center"
                 "Other Sensors"
                 )
                 (box :orientation "h" :space-evenly true :spacing 30
                      (for chunk in {sensors.general}
                           (box :orientation "h" :space-evenly true :spacing 10
                                (sensorDataColumn :data chunk :key1 "name" :title "Name"
                                                  :addon ":" :halign "center" 
                                                  :titleClass "h3 white" :lineClass "sensorCatagoryLine" :textClass "h4 white sensorText")
                                (sensorDataColumn :data chunk :key1 "temp" :title "temp"
                                                  :addon "°C" :halign "start"
                                                  :titleClass "h3 white" :lineClass "sensorCatagoryLine" :textClass "h4 white sensorText")
                                )
                       )
                      )
                 )

            )
       )
  )
(defwidget sensorDataColumn [data title key1 ?key2 ?addon ?halign ?textClass ?titleClass ?lineClass]
  (box :class "hack ${titleClass}" :orientation "v" :space-evenly false  :spacing 3
       "${title}"
       (box :class lineClass)
       (for core in data
            (box :class "hack ${textClass}" :halign "${halign}"
                 "${key2 == "" ? core[key1] : core[key1][key2]}${addon}"
                 )
            )
       )
  )

(defwidget wifiStats [] 
  (box :class "external topRight wifiStats" :orientation "v" :space-evenly false  
       (box :class "wifiInfo pad" :orientation "h" :space-evenly false :spacing 10 :halign "center"
            (box :class "icon" {wifi.connected ? "󰖩 " : "󰖪 "})
            (box :class "text" {wifi.connected ? "${wifi.name}" : "Wifi not connected!"})
            (box :class "text" {wifi.connected ? "${wifi.address}" : ""})
         )
       (button :class "pad" :onclick "scripts/windowManager close; iwgtk &"
               (box :space-evenly false :halign "center" :spacing 10
                 (box :class "icon"
                      " ")
                 (box :class "text"
                      "Wifi Settings")
                 )
               )
       )
  )

(defvar count "[20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]"
  )
(defwidget myGraphNetwork [data forEachLoopVar interface barHeight]
  (box :class "graphContainer" :space-evenly false :spacing 2
       (box :class "info" :orientation "v"  :valign "center"
            (box :halign "end" :class "key uploadKey"
                 "󰁞")
            (box :halign "end" :class "key downloadKey"
                 "󰁆")
            )
       (box :orientation "v" :space-evenly false
            (box :class "graph" :orientation "h" :height barHeight :width 0 :space-evenly false 
                 (for num in forEachLoopVar
                      (box :orientation "h"
                           (box :class "downloadContainer" :orientation "v" :space-evenly false :valign "end"
                                (box :class "graphBar download" :height {round(barHeight * (((data.history[num]["${interface}"].download + data.history[num == 20 ? num : num + 1]["${interface}"].download)/2) / (data.max["${interface}"] + 1)), 0)}
                                     :width 1 
                                     )
                                )
                           (box :class "uploadContainer" :orientation "v" :space-evenly false :valign "end"
                                (box :class "graphBar upload" :height {round(barHeight * (((data.history[num]["${interface}"].upload + data.history[num == 20 ? num : num + 1]["${interface}"].upload)/2) / (data.max["${interface}"] + 1)), 0)}
                                     :width 1 
                                     )
                                )
                           )
                      )
                 )
            (box :class "interfaceName"
                 "${interface == "all" ? "Total" : interface}"
                 )
            )
       (box :halign "start" :valign "start" :class "max" 
            "${round((data.max["${interface}"] + 1)/ 1000, 2)} Kb")
       )
  )
(defwidget networkStats []
  (box :class "computerStats external topRight" :orientation "v" :space-evenly false :style "padding: 20px;" :spacing 20
       (box :space-evenly false :spacing 10 :halign "end"
            (myGraphNetwork :data "${networkTracking}"
                            :forEachLoopVar "${count}"
                            :interface "all"
                            :barHeight 100)
            )
       (for interface in networkInterfaces
            (box :space-evenly false :spacing 10 :halign "end"
                 (myGraphNetwork :data "${networkTracking}"
                                 :forEachLoopVar "${count}"
                                 :interface "${interface}"
                                 :barHeight 100)
                 )
            )
       ))
(defwidget brightnessControls []
  (box :class "brightnessControls external topRight pad" :orientation "v" :space-evenly false :spacing 30
       (box :orientation "v" :space-evenly false :spacing 10
            "Monitor"
            (box :orientation "h" :space-evenly false :spacing 10
                 "${round(brightnessMon / brightnessMonMax * 100, 1)} %"
                 (scale :min 0
                         :max brightnessMonMax
                         :value brightnessMon
                         :active true
                         :onchange "brightnessctl -d $MONITOR_BACKLIGHT s {}; eww update brightnessMon={}"
                         )
             )
        )
       (box :orientation "v" :space-evenly false :spacing 10
            "Keyboard"
            (box :orientation "h" :space-evenly false :spacing 10
                 "${round(brightnessKbd / brightnessKbdMax * 100, 1)} %"
                 (scale :min 0
                         :max brightnessKbdMax
                         :value brightnessKbd
                         :active true
                         :onchange "brightnessctl -d $KEYBOARD_BACKLIGHT s {}; eww update brightnessKbd={}"
                         )
             )
        )

  ))


(defwidget computerStats []
  (box :class "computerStats external topRight" :orientation "v" :space-evenly false :style "padding: 20px;" :spacing 20
       (box :class "cpu" :orientation "v" :space-evenly false :spacing 5
            "CPU"
            (centerbox :class "average" :orientation "h"
                       "Avg."
                       (scale :min 0
                              :max 101
                              :active false
                              :value "${EWW_CPU.avg}"
                              :onchange ""
                              )
                       (box :halign "end"
                            "${round(EWW_CPU.avg, 1)} %"
                            )
                       )
            (for core in "${EWW_CPU.cores}"
                 (centerbox :orientation "h"
                            "${core.core}"
                            (scale :min 0
                                   :max 101
                                   :active false
                                   :value "${core.usage}"
                                   :onchange ""
                                   )
                            (box :halign "end"
                                 "${core.freq} Mhz"
                                 )
                            )
                 )
            )
       (box :class "memory" :orientation "v" :spacing 5
            "Memory"
            (centerbox :orientation "h" 
                       "${round(EWW_RAM.used_mem / 1000000000, 2)} Gb"
                       (scale :min 0
                              :max 101
                              :active false
                              :value "${EWW_RAM.used_mem_perc}"
                              :onchange ""
                              )
                       "${round(EWW_RAM.total_mem / 1000000000, 2)} Gb"
                       )
            )
       (box :class "processes pad"
            "${processes}"
            )

       ))


(defwidget audioControls []
  (box :class "external pad audioControls topRight" :orientation "v"
       (box :class "mainAudio" :orientation "h" :space-evenly false :spacing 10
            (button :style "font-size: 18pt; padding-right:20px"
                    :onclick "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle &"
                    "${audioMuted == "true" ? "󰝟" : volume < 60 ? (volume > 0 ? "󰖀" : "󰕿") : "󰕾"}")
            (scale :min 0
                   :max 101
                   :active true
                   :value volume
                   :onchange "scripts/setvolume {}; eww update volume=`scripts/volume`") ; sets volume and updates volume variable
            (box :class "text"
                 "${volume}%")
            )
       (box :class "audioList border" :orientation "v"
            (for device in audioDevices
                 (button :onclick "wpctl set-default ${device[1]}; eww update audioDevices=\"`scripts/getAudioDevices all`\"" :class "${device[0] ? "active" : ""}"
                         (box :space-evenly false :spacing 20
                              (box :class "icon"
                                   "󰋋")
                              (box :class "text"
                                   "${device[2]}"
                                   )
                              )
                         )
                 )
            )
 ))

(defwidget batteryInfo []
  (box :class "external batteryInfo topRight" :orientation "v" :space-evenly false 
       (box :class "pad" :orientation "h" :space-evenly false :spacing 10
            (scale :min 0 ; sets volume and updates volume variable
                   :max 101
                   :active false
                   :value battery
                   :onchange ""
                   )
            "${battery}%"
            )
       (box :class "borderTop" :visible enablePowerProfileSelection)
       (box :class "powerSettings pad" :orientation "v" :space-evenly false :spacing 10 :visible enablePowerProfileSelection
            (box :class "h3" "Power profile options")
            (box :class "powerOptions border" :orientation "v" :space-evenly false 
                 (box :class "pad borderBottom"
                   "Current Mode:"
                   "${powerMode}"
                   )
                 (box 
                   (button :class "pad" :onclick "$(pkexec tlp start) &"
                           "Auto")
                   (button :class "pad borderLeft borderRight" :onclick "$(pkexec tlp ac) &" 
                           "AC")
                   (button :class "pad" :onclick "$(pkexec tlp bat) &" 
                           "Battery")
                   )
                 )
            )

   ))


(defwidget musicControls []
  (box :class "external musicControls" :orientation "v" :space-evenly false
       (box :class "image" :orientation "h" :style "background-image: url('${musicArt}');")
       (centerbox :class "topBox" :orientation "h"
                  (box :class "time" :halign "end" 
                       musicTimeDisplay)
                  (box :class "slider"
                       (scale :class "musicSlider" 
                              :halign "center"
                              :min 0
                              :max musicLength
                              :active true
                              :value musicPosition
                              :onchange "playerctl -p spotify position {}")
                       )
                  (box :class "time" :halign "start" 
                       musicLengthText)
                  )
       (box :orientation "h"
            (button :onclick "playerctl -p spotify previous &"
                    "󰒮")
            (button :class "middle"
                    :onclick "playerctl -p spotify play-pause &"
                    {musicPlaying == "Playing" ? "󰏤" : ""})
            (button :onclick "playerctl -p spotify next &"
                    "󰒭")
            )
       ))


; WINDOWS =========================================================
(defwindow bartop
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "100%"
                      :height "30px"
                      :anchor "top center")
  :stacking "fg"
  :exclusive true
  :wm-ignore false
  (bar)
  )
(defwindow datePopOut
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "20%"
                      :height "10px"
                      :anchor "top left")
  :stacking "overlay"
  :exclusive false
  :wm-ignore false
  (dateBox)
  )
(defwindow musicControls
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "400px"
                      :height "150px"
                      :anchor "top center")
  :stacking "overlay"
  :exclusive false
  :wm-ignore false
  (musicControls)
  )

(defwindow tempStats
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "300px"
                      :height "10px"
                      :anchor "top right")
  :stacking "overlay"
  :exclusive false
  :wm-ignore false
  (tempStats)
  )
(defwindow wifiStats
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "300px"
                      :height "10px"
                      :anchor "top right")
  :stacking "overlay"
  :exclusive false
  :wm-ignore false
  (wifiStats)
  )
(defwindow audioControls
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "300px"
                      :height "10px"
                      :anchor "top right")
  :stacking "overlay"
  :exclusive false
  :wm-ignore false
  (audioControls)
  )
(defwindow batteryInfo
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "300px"
                      :height "10px"
                      :anchor "top right")
  :stacking "overlay"
  :exclusive false
  :wm-ignore false
  (batteryInfo)
  )

(defwindow computerStats
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "450px"
                      :height "10px"
                      :anchor "top right")
  :stacking "overlay"
  :exclusive false
  :wm-ignore false
  (computerStats)
  )

(defwindow networkStats
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "450px"
                      :height "10px"
                      :anchor "top right")
  :stacking "overlay"
  :exclusive false
  :wm-ignore false
  (networkStats)
  )

(defwindow brightnessControls
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "300px"
                      :height "10px"
                      :anchor "top right")
  :stacking "overlay"
  :exclusive false
  :wm-ignore false
  (brightnessControls)
  )


; closer
(defwidget closerCover []
  (eventbox :onclick "scripts/windowManager close &"))
(defwindow windowCloser
  :monitor 0
  :geometry (geometry :width "100%" :height "100%")
  :stacking "fg"
  :focusable false
  (closerCover)
  )

;musicbar
(defwindow musicBars
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "100%"
                      :height "100%"
                      :anchor "bottom center")
  :stacking "bg"
  :exclusive false
  :wm-ignore false
  (musicBars)
  )
  
(defwidget musicBars []
  (box :valign "end" :style "background-color: rgba(0,0,0,0)" :visible enableMusicBar
        (box :class "musicBar" :valign "end" "${replace(musicBarsData,";","
")}")
       )
)
