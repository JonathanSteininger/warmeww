#! /usr/bin/bash

# this will get the total network download and upload in mbps. output: json
#

networkStateLocation="$HOME/.config/eww/scripts/states/network"
networkTrackingLocation="$HOME/.config/eww/scripts/states/networkHistory"
#cache total download an upload. compare to last total upload/download. return difference = total over time.

printHelp () {
    echo "
Usage: network [COMMAND]

commands:
    help - prints help menu
    tracking - prints json array of past 20 network queries
    interfaces - prints a iteratable list of interfaces
    save - makes application force to save to history (saving is done automatically)
    "
}

formatInterfaceJSON () {
    local interface="$1"
    local download="$2"
    local upload="$3"
    echo "\"${interface}\":{\"download\":${download},\"upload\":${upload}}"
}

getInterfacesLines () {
    echo "$(ifstat -j | jq '.kernel | keys[]' | tr -d "\"")"
}

getInterfacesJSON () {
    echo "$(ifstat -j | jq '.kernel | keys')"
}

getInterfacesTotal () {
    local totalUp=0
    local totalDown=0
    local output=""
    local flag=true
    while read interface; do
        local upload=$(ifstat -j | jq ".kernel.${interface}.tx_bytes")
        totalUp=$(bc <<< "$upload + $totalUp")
        local download=$(ifstat -j | jq ".kernel.${interface}.rx_bytes")
        totalDown=$(bc <<< "$download + $totalDown")
        if $flag; then
            output=",$(formatInterfaceJSON "$interface" "$download" "$upload")"
        else
            output="${output},$(formatInterfaceJSON "$interface" "$download" "$upload")"
        fi
        flag=false;
    done <<< "$(getInterfacesLines)"
    output="{$(formatInterfaceJSON "all" $totalDown $totalUp)${output}}"
    echo "$output"
}



printAll () {
    local now=$(getInterfacesTotal)
    local past=$(cat "$networkStateLocation")
    local input="[$(getInterfacesTotal),$(cat "$networkStateLocation")]"
    local output=$(jq "map(to_entries) | flatten | group_by(.key) | map(.[0].value.download -= .[1].value.download | .[0].value.upload -= .[1].value.upload) | [.[].[0]] | from_entries" <<< "$input")
    echo $output
}

trackingDistance=20

getHeadTrackingJSONLines () {
    head -n "$trackingDistance" "$networkTrackingLocation"
}

saveTrackingJSON () {
    local flag=true
    echo -e "$1" | jq -c ".[]" | while read line; do
        if $flag; then
            echo "$line" > "$networkTrackingLocation"
        else
            echo "$line" >> "$networkTrackingLocation"
        fi
        flag=false
    done
}


getUpdatedTrackingJSON () {
    local olderStuff=$(getHeadTrackingJSONLines)
    local output=$(printAll)
    while read line; do
        if test "$line" != ""; then
            output="${output},$line"
        fi
    done <<< "$(echo -e "$olderStuff")"
    local output="[${output}]"
    echo "$output"
}

saveState () {
    saveTrackingJSON "$(getUpdatedTrackingJSON)"
    echo "$(getInterfacesTotal)" > $networkStateLocation
}

getBiggestJSON () {
    local history=$1
    echo "$1" > "temp.txt"
    local maxs=$(jq -c "map(to_entries) | flatten | group_by(.key) | map({key: .[0].key, value: map(.value[]) | max}) | from_entries" <<< "$history")
    echo "$maxs"
}

if test "$1" == "all"; then
    printAll
    saveState
elif test "$1" == "tracking"; then
    everything=$(getUpdatedTrackingJSON)
    saveState
    maxs=$(getBiggestJSON "$everything")
    echo "{\"max\":${maxs},\"history\":${everything}}"
elif test "$1" == "save"; then
    saveState
elif test "$1" == "interfaces"; then
    getInterfacesJSON
elif test "$1" == "help"; then
    printHelp
elif test "$1" == ""; then
    printHelp
else
    printHelp
fi
